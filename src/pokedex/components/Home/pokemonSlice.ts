import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Pokemon } from 'pokenode-ts';

import { RootState, AppThunk } from '../../store';

export interface PokemonState {
  count?: number;
  data: Pokemon[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: PokemonState = {
  // count: null,
  data: [],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchPokemonsAsync = createAsyncThunk(
  'pokemon/fetchPokemons',
  async (offset?: number) => {
    // const response = await listPokemons(offset);
    const response = {
      count: 0,
      results: []
    };

    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const pokemonSlice = createSlice({
  name: 'pokemon',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchPokemonsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchPokemonsAsync.fulfilled, (state, action) => {
        console.log('fulfilled action', action);

        state.status = 'idle';
        state.count = action.payload.count;
        state.data.push(...(action.payload.results as Pokemon[]));
      })
      .addCase(fetchPokemonsAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

// export const {} = pokemonSlice.actions;

// The function below is called a selector and allows us to select a pokemons from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.pokemons)`
export const selectPokemons = (state: RootState) => state.pokemons.data;
export const selectPokemonsStatus = (state: RootState) => state.pokemons.status;

export default pokemonSlice.reducer;
